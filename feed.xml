<feed xmlns="http://www.w3.org/2005/Atom"> <generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://flying-polarbear.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://flying-polarbear.github.io/" rel="alternate" type="text/html" /> <updated>2019-10-28T15:28:26+08:00</updated> <id>https://flying-polarbear.github.io//feed.xml</id> <entry><title>git同步远程更新</title><link href="https://flying-polarbear.github.io//posts/git-syn/" rel="alternate" type="text/html" title="git同步远程更新" /><published>2019-10-25T10:58:00+08:00</published> <updated>2019-10-28T15:28:26+08:00</updated> <id>https://flying-polarbear.github.io//posts/git-syn/</id> <content src="https://flying-polarbear.github.io//posts/git-syn/" /> <author> <name>搞生信的变态</name> </author> <category term="Tech" /> <category term="git" /> <summary>在clone了某个repo之后，由于远程端更新了，我们也想同步更新远程repo，实现的方式有很多 git log首先大致看下提交信息 git remote -v看下remote端地址信息是否正确 git fetch origin master:tmp下载远程maste分枝到本地tmp分支 git diff tmp检查更新内容 git merge tmp合并tmp分枝到...</summary> </entry> <entry><title>ruby hash fetch方法效率问题</title><link href="https://flying-polarbear.github.io//posts/ruby-fetch/" rel="alternate" type="text/html" title="ruby hash fetch方法效率问题" /><published>2019-10-22T16:47:00+08:00</published> <updated>2019-10-28T15:28:26+08:00</updated> <id>https://flying-polarbear.github.io//posts/ruby-fetch/</id> <content src="https://flying-polarbear.github.io//posts/ruby-fetch/" /> <author> <name>搞生信的变态</name> </author> <category term="Tech" /> <category term="ruby" /> <summary>我们经常用的hash取值的问题，假设有个hash, h = {:a=&gt;1,:b=2},对h取值，一般用索引[]的方法，比如h[:a],h[:b]，在key存在的时候没有问题，但是当key不存在的时候，比如h[:x]，取出来的值就是nil了，在python中甚至会直接报错，这有个问题就是，假设有个存在key的值，假设h[:c]=nil,那么按照这种规则，我根本不知道:c这个key到底是不...</summary> </entry> <entry><title>浅谈ruby中隐式、显式方法区别(to_s,to_str等)</title><link href="https://flying-polarbear.github.io//posts/exp-imp-ruby/" rel="alternate" type="text/html" title="浅谈ruby中隐式、显式方法区别(to_s,to_str等)" /><published>2019-10-15T19:16:00+08:00</published> <updated>2019-10-28T15:28:26+08:00</updated> <id>https://flying-polarbear.github.io//posts/exp-imp-ruby/</id> <content src="https://flying-polarbear.github.io//posts/exp-imp-ruby/" /> <author> <name>搞生信的变态</name> </author> <category term="Tech" /> <category term="ruby" /> <summary>在ruby中，虽然不常见，但是有时候会看见类似to_str,to_ary,to_hash,to_int等方法，他们看起来跟我们常用的to_i,to_a等方法似乎是一样的功能，但是却明显感觉到他们是不一样的，这到底是为什么呢？这就是ruby中常用数据类型的隐式和显式方法了，所以这里简单谈谈ruby中数据类型的隐式、显式的功能和区别 想要进阶ruby，这个概念是一定要掌握以及使用的，有了它，你的...</summary> </entry> <entry><title>quay docker镜像</title><link href="https://flying-polarbear.github.io//posts/docker-quay/" rel="alternate" type="text/html" title="quay docker镜像" /><published>2019-10-14T10:24:00+08:00</published> <updated>2019-10-28T15:28:26+08:00</updated> <id>https://flying-polarbear.github.io//posts/docker-quay/</id> <content src="https://flying-polarbear.github.io//posts/docker-quay/" /> <author> <name>搞生信的变态</name> </author> <category term="Tech" /> <category term="docker" /> <summary>因为众所周知的原因，在开始项目之前，关于下载和配置，你一定要多学会一门技术。具体就不多说了。 docker官方网站仓库加速可以使用daocloud，亲测速度非常之快。但是因为image分发有多个地方，比如redhat的quay.io 解决方法也比docker官方的加速更简单，只需使用中科大的镜像就行了 假如需要quay的y镜像，原始命令是docker pull quay.io/x/y:v...</summary> </entry> <entry><title>PostgreSQL入门(2)</title><link href="https://flying-polarbear.github.io//posts/psql-2/" rel="alternate" type="text/html" title="PostgreSQL入门(2)" /><published>2019-10-09T14:42:00+08:00</published> <updated>2019-10-28T15:28:26+08:00</updated> <id>https://flying-polarbear.github.io//posts/psql-2/</id> <content src="https://flying-polarbear.github.io//posts/psql-2/" /> <author> <name>搞生信的变态</name> </author> <category term="Tech" /> <category term="sql" /> <summary>最开始前面介绍了如何使用psql创建数据库账号以及连接数据库，那么现在就是需要对数据库进行数据操作了，操作数据首先得有数据，那么首先尝试下建立一个数据。在sql里数据的存在形式是以表，也就是table的方式体现的。 CREATE TABLE class ( id int NOT NULL PRIMARY KEY, grade int, teacher varchar(100), date ...</summary> </entry> </feed>
